// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

func TestDefaultMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	mb := NewMetricsBuilder(DefaultMetricsSettings(), receivertest.NewNopCreateSettings(), WithStartTime(start))
	enabledMetrics := make(map[string]bool)

	enabledMetrics["saphana.alert.count"] = true
	mb.RecordSaphanaAlertCountDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.backup.latest"] = true
	mb.RecordSaphanaBackupLatestDataPoint(ts, "1")

	enabledMetrics["saphana.column.memory.used"] = true
	mb.RecordSaphanaColumnMemoryUsedDataPoint(ts, "1", AttributeColumnMemoryType(1), AttributeColumnMemorySubtype(1))

	enabledMetrics["saphana.component.memory.used"] = true
	mb.RecordSaphanaComponentMemoryUsedDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.connection.count"] = true
	mb.RecordSaphanaConnectionCountDataPoint(ts, "1", AttributeConnectionStatus(1))

	enabledMetrics["saphana.cpu.used"] = true
	mb.RecordSaphanaCPUUsedDataPoint(ts, "1", AttributeCPUType(1))

	enabledMetrics["saphana.disk.size.current"] = true
	mb.RecordSaphanaDiskSizeCurrentDataPoint(ts, "1", "attr-val", "attr-val", AttributeDiskStateUsedFree(1))

	enabledMetrics["saphana.host.memory.current"] = true
	mb.RecordSaphanaHostMemoryCurrentDataPoint(ts, "1", AttributeMemoryStateUsedFree(1))

	enabledMetrics["saphana.host.swap.current"] = true
	mb.RecordSaphanaHostSwapCurrentDataPoint(ts, "1", AttributeHostSwapState(1))

	enabledMetrics["saphana.instance.code_size"] = true
	mb.RecordSaphanaInstanceCodeSizeDataPoint(ts, "1")

	enabledMetrics["saphana.instance.memory.current"] = true
	mb.RecordSaphanaInstanceMemoryCurrentDataPoint(ts, "1", AttributeMemoryStateUsedFree(1))

	enabledMetrics["saphana.instance.memory.shared.allocated"] = true
	mb.RecordSaphanaInstanceMemorySharedAllocatedDataPoint(ts, "1")

	enabledMetrics["saphana.instance.memory.used.peak"] = true
	mb.RecordSaphanaInstanceMemoryUsedPeakDataPoint(ts, "1")

	enabledMetrics["saphana.license.expiration.time"] = true
	mb.RecordSaphanaLicenseExpirationTimeDataPoint(ts, "1", "attr-val", "attr-val")

	enabledMetrics["saphana.license.limit"] = true
	mb.RecordSaphanaLicenseLimitDataPoint(ts, "1", "attr-val", "attr-val")

	enabledMetrics["saphana.license.peak"] = true
	mb.RecordSaphanaLicensePeakDataPoint(ts, "1", "attr-val", "attr-val")

	enabledMetrics["saphana.network.request.average_time"] = true
	mb.RecordSaphanaNetworkRequestAverageTimeDataPoint(ts, "1")

	enabledMetrics["saphana.network.request.count"] = true
	mb.RecordSaphanaNetworkRequestCountDataPoint(ts, "1", AttributeActivePendingRequestState(1))

	enabledMetrics["saphana.network.request.finished.count"] = true
	mb.RecordSaphanaNetworkRequestFinishedCountDataPoint(ts, "1", AttributeInternalExternalRequestType(1))

	enabledMetrics["saphana.replication.average_time"] = true
	mb.RecordSaphanaReplicationAverageTimeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")

	enabledMetrics["saphana.replication.backlog.size"] = true
	mb.RecordSaphanaReplicationBacklogSizeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")

	enabledMetrics["saphana.replication.backlog.time"] = true
	mb.RecordSaphanaReplicationBacklogTimeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")

	enabledMetrics["saphana.row_store.memory.used"] = true
	mb.RecordSaphanaRowStoreMemoryUsedDataPoint(ts, "1", AttributeRowMemoryType(1))

	enabledMetrics["saphana.schema.memory.used.current"] = true
	mb.RecordSaphanaSchemaMemoryUsedCurrentDataPoint(ts, "1", "attr-val", AttributeSchemaMemoryType(1))

	enabledMetrics["saphana.schema.memory.used.max"] = true
	mb.RecordSaphanaSchemaMemoryUsedMaxDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.schema.operation.count"] = true
	mb.RecordSaphanaSchemaOperationCountDataPoint(ts, "1", "attr-val", AttributeSchemaOperationType(1))

	enabledMetrics["saphana.schema.record.compressed.count"] = true
	mb.RecordSaphanaSchemaRecordCompressedCountDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.schema.record.count"] = true
	mb.RecordSaphanaSchemaRecordCountDataPoint(ts, "1", "attr-val", AttributeSchemaRecordType(1))

	enabledMetrics["saphana.service.code_size"] = true
	mb.RecordSaphanaServiceCodeSizeDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.service.count"] = true
	mb.RecordSaphanaServiceCountDataPoint(ts, "1", AttributeServiceStatus(1))

	enabledMetrics["saphana.service.memory.compactors.allocated"] = true
	mb.RecordSaphanaServiceMemoryCompactorsAllocatedDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.service.memory.compactors.freeable"] = true
	mb.RecordSaphanaServiceMemoryCompactorsFreeableDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.service.memory.effective_limit"] = true
	mb.RecordSaphanaServiceMemoryEffectiveLimitDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.service.memory.heap.current"] = true
	mb.RecordSaphanaServiceMemoryHeapCurrentDataPoint(ts, "1", "attr-val", AttributeMemoryStateUsedFree(1))

	enabledMetrics["saphana.service.memory.limit"] = true
	mb.RecordSaphanaServiceMemoryLimitDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.service.memory.shared.current"] = true
	mb.RecordSaphanaServiceMemorySharedCurrentDataPoint(ts, "1", "attr-val", AttributeMemoryStateUsedFree(1))

	enabledMetrics["saphana.service.memory.used"] = true
	mb.RecordSaphanaServiceMemoryUsedDataPoint(ts, "1", "attr-val", AttributeServiceMemoryUsedType(1))

	enabledMetrics["saphana.service.stack_size"] = true
	mb.RecordSaphanaServiceStackSizeDataPoint(ts, "1", "attr-val")

	enabledMetrics["saphana.service.thread.count"] = true
	mb.RecordSaphanaServiceThreadCountDataPoint(ts, "1", AttributeThreadStatus(1))

	enabledMetrics["saphana.transaction.blocked"] = true
	mb.RecordSaphanaTransactionBlockedDataPoint(ts, "1")

	enabledMetrics["saphana.transaction.count"] = true
	mb.RecordSaphanaTransactionCountDataPoint(ts, "1", AttributeTransactionType(1))

	enabledMetrics["saphana.uptime"] = true
	mb.RecordSaphanaUptimeDataPoint(ts, "1", "attr-val", "attr-val")

	enabledMetrics["saphana.volume.operation.count"] = true
	mb.RecordSaphanaVolumeOperationCountDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))

	enabledMetrics["saphana.volume.operation.size"] = true
	mb.RecordSaphanaVolumeOperationSizeDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))

	enabledMetrics["saphana.volume.operation.time"] = true
	mb.RecordSaphanaVolumeOperationTimeDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))

	metrics := mb.Emit()

	assert.Equal(t, 1, metrics.ResourceMetrics().Len())
	sm := metrics.ResourceMetrics().At(0).ScopeMetrics()
	assert.Equal(t, 1, sm.Len())
	ms := sm.At(0).Metrics()
	assert.Equal(t, len(enabledMetrics), ms.Len())
	seenMetrics := make(map[string]bool)
	for i := 0; i < ms.Len(); i++ {
		assert.True(t, enabledMetrics[ms.At(i).Name()])
		seenMetrics[ms.At(i).Name()] = true
	}
	assert.Equal(t, len(enabledMetrics), len(seenMetrics))
}

func TestAllMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	metricsSettings := MetricsSettings{
		SaphanaAlertCount:                       MetricSettings{Enabled: true},
		SaphanaBackupLatest:                     MetricSettings{Enabled: true},
		SaphanaColumnMemoryUsed:                 MetricSettings{Enabled: true},
		SaphanaComponentMemoryUsed:              MetricSettings{Enabled: true},
		SaphanaConnectionCount:                  MetricSettings{Enabled: true},
		SaphanaCPUUsed:                          MetricSettings{Enabled: true},
		SaphanaDiskSizeCurrent:                  MetricSettings{Enabled: true},
		SaphanaHostMemoryCurrent:                MetricSettings{Enabled: true},
		SaphanaHostSwapCurrent:                  MetricSettings{Enabled: true},
		SaphanaInstanceCodeSize:                 MetricSettings{Enabled: true},
		SaphanaInstanceMemoryCurrent:            MetricSettings{Enabled: true},
		SaphanaInstanceMemorySharedAllocated:    MetricSettings{Enabled: true},
		SaphanaInstanceMemoryUsedPeak:           MetricSettings{Enabled: true},
		SaphanaLicenseExpirationTime:            MetricSettings{Enabled: true},
		SaphanaLicenseLimit:                     MetricSettings{Enabled: true},
		SaphanaLicensePeak:                      MetricSettings{Enabled: true},
		SaphanaNetworkRequestAverageTime:        MetricSettings{Enabled: true},
		SaphanaNetworkRequestCount:              MetricSettings{Enabled: true},
		SaphanaNetworkRequestFinishedCount:      MetricSettings{Enabled: true},
		SaphanaReplicationAverageTime:           MetricSettings{Enabled: true},
		SaphanaReplicationBacklogSize:           MetricSettings{Enabled: true},
		SaphanaReplicationBacklogTime:           MetricSettings{Enabled: true},
		SaphanaRowStoreMemoryUsed:               MetricSettings{Enabled: true},
		SaphanaSchemaMemoryUsedCurrent:          MetricSettings{Enabled: true},
		SaphanaSchemaMemoryUsedMax:              MetricSettings{Enabled: true},
		SaphanaSchemaOperationCount:             MetricSettings{Enabled: true},
		SaphanaSchemaRecordCompressedCount:      MetricSettings{Enabled: true},
		SaphanaSchemaRecordCount:                MetricSettings{Enabled: true},
		SaphanaServiceCodeSize:                  MetricSettings{Enabled: true},
		SaphanaServiceCount:                     MetricSettings{Enabled: true},
		SaphanaServiceMemoryCompactorsAllocated: MetricSettings{Enabled: true},
		SaphanaServiceMemoryCompactorsFreeable:  MetricSettings{Enabled: true},
		SaphanaServiceMemoryEffectiveLimit:      MetricSettings{Enabled: true},
		SaphanaServiceMemoryHeapCurrent:         MetricSettings{Enabled: true},
		SaphanaServiceMemoryLimit:               MetricSettings{Enabled: true},
		SaphanaServiceMemorySharedCurrent:       MetricSettings{Enabled: true},
		SaphanaServiceMemoryUsed:                MetricSettings{Enabled: true},
		SaphanaServiceStackSize:                 MetricSettings{Enabled: true},
		SaphanaServiceThreadCount:               MetricSettings{Enabled: true},
		SaphanaTransactionBlocked:               MetricSettings{Enabled: true},
		SaphanaTransactionCount:                 MetricSettings{Enabled: true},
		SaphanaUptime:                           MetricSettings{Enabled: true},
		SaphanaVolumeOperationCount:             MetricSettings{Enabled: true},
		SaphanaVolumeOperationSize:              MetricSettings{Enabled: true},
		SaphanaVolumeOperationTime:              MetricSettings{Enabled: true},
	}
	observedZapCore, observedLogs := observer.New(zap.WarnLevel)
	settings := receivertest.NewNopCreateSettings()
	settings.Logger = zap.New(observedZapCore)
	mb := NewMetricsBuilder(metricsSettings, settings, WithStartTime(start))

	assert.Equal(t, 0, observedLogs.Len())

	mb.RecordSaphanaAlertCountDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaBackupLatestDataPoint(ts, "1")
	mb.RecordSaphanaColumnMemoryUsedDataPoint(ts, "1", AttributeColumnMemoryType(1), AttributeColumnMemorySubtype(1))
	mb.RecordSaphanaComponentMemoryUsedDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaConnectionCountDataPoint(ts, "1", AttributeConnectionStatus(1))
	mb.RecordSaphanaCPUUsedDataPoint(ts, "1", AttributeCPUType(1))
	mb.RecordSaphanaDiskSizeCurrentDataPoint(ts, "1", "attr-val", "attr-val", AttributeDiskStateUsedFree(1))
	mb.RecordSaphanaHostMemoryCurrentDataPoint(ts, "1", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaHostSwapCurrentDataPoint(ts, "1", AttributeHostSwapState(1))
	mb.RecordSaphanaInstanceCodeSizeDataPoint(ts, "1")
	mb.RecordSaphanaInstanceMemoryCurrentDataPoint(ts, "1", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaInstanceMemorySharedAllocatedDataPoint(ts, "1")
	mb.RecordSaphanaInstanceMemoryUsedPeakDataPoint(ts, "1")
	mb.RecordSaphanaLicenseExpirationTimeDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaLicenseLimitDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaLicensePeakDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaNetworkRequestAverageTimeDataPoint(ts, "1")
	mb.RecordSaphanaNetworkRequestCountDataPoint(ts, "1", AttributeActivePendingRequestState(1))
	mb.RecordSaphanaNetworkRequestFinishedCountDataPoint(ts, "1", AttributeInternalExternalRequestType(1))
	mb.RecordSaphanaReplicationAverageTimeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")
	mb.RecordSaphanaReplicationBacklogSizeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")
	mb.RecordSaphanaReplicationBacklogTimeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")
	mb.RecordSaphanaRowStoreMemoryUsedDataPoint(ts, "1", AttributeRowMemoryType(1))
	mb.RecordSaphanaSchemaMemoryUsedCurrentDataPoint(ts, "1", "attr-val", AttributeSchemaMemoryType(1))
	mb.RecordSaphanaSchemaMemoryUsedMaxDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaSchemaOperationCountDataPoint(ts, "1", "attr-val", AttributeSchemaOperationType(1))
	mb.RecordSaphanaSchemaRecordCompressedCountDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaSchemaRecordCountDataPoint(ts, "1", "attr-val", AttributeSchemaRecordType(1))
	mb.RecordSaphanaServiceCodeSizeDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceCountDataPoint(ts, "1", AttributeServiceStatus(1))
	mb.RecordSaphanaServiceMemoryCompactorsAllocatedDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemoryCompactorsFreeableDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemoryEffectiveLimitDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemoryHeapCurrentDataPoint(ts, "1", "attr-val", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaServiceMemoryLimitDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemorySharedCurrentDataPoint(ts, "1", "attr-val", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaServiceMemoryUsedDataPoint(ts, "1", "attr-val", AttributeServiceMemoryUsedType(1))
	mb.RecordSaphanaServiceStackSizeDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceThreadCountDataPoint(ts, "1", AttributeThreadStatus(1))
	mb.RecordSaphanaTransactionBlockedDataPoint(ts, "1")
	mb.RecordSaphanaTransactionCountDataPoint(ts, "1", AttributeTransactionType(1))
	mb.RecordSaphanaUptimeDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaVolumeOperationCountDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))
	mb.RecordSaphanaVolumeOperationSizeDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))
	mb.RecordSaphanaVolumeOperationTimeDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))

	metrics := mb.Emit(WithDbSystem("attr-val"), WithSaphanaHost("attr-val"))

	assert.Equal(t, 1, metrics.ResourceMetrics().Len())
	rm := metrics.ResourceMetrics().At(0)
	attrCount := 0
	attrCount++
	attrVal, ok := rm.Resource().Attributes().Get("db.system")
	assert.True(t, ok)
	assert.EqualValues(t, "attr-val", attrVal.Str())
	attrCount++
	attrVal, ok = rm.Resource().Attributes().Get("saphana.host")
	assert.True(t, ok)
	assert.EqualValues(t, "attr-val", attrVal.Str())
	assert.Equal(t, attrCount, rm.Resource().Attributes().Len())

	assert.Equal(t, 1, rm.ScopeMetrics().Len())
	ms := rm.ScopeMetrics().At(0).Metrics()
	allMetricsCount := reflect.TypeOf(MetricsSettings{}).NumField()
	assert.Equal(t, allMetricsCount, ms.Len())
	validatedMetrics := make(map[string]struct{})
	for i := 0; i < ms.Len(); i++ {
		switch ms.At(i).Name() {
		case "saphana.alert.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Number of current alerts.", ms.At(i).Description())
			assert.Equal(t, "{alerts}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("rating")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.alert.count"] = struct{}{}
		case "saphana.backup.latest":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The age of the latest backup by start time.", ms.At(i).Description())
			assert.Equal(t, "s", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["saphana.backup.latest"] = struct{}{}
		case "saphana.column.memory.used":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The memory used in all columns.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "main", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("subtype")
			assert.True(t, ok)
			assert.Equal(t, "data", attrVal.Str())
			validatedMetrics["saphana.column.memory.used"] = struct{}{}
		case "saphana.component.memory.used":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The memory used in components.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("component")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.component.memory.used"] = struct{}{}
		case "saphana.connection.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of current connections.", ms.At(i).Description())
			assert.Equal(t, "{connections}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("status")
			assert.True(t, ok)
			assert.Equal(t, "running", attrVal.Str())
			validatedMetrics["saphana.connection.count"] = struct{}{}
		case "saphana.cpu.used":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Total CPU time spent.", ms.At(i).Description())
			assert.Equal(t, "ms", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "user", attrVal.Str())
			validatedMetrics["saphana.cpu.used"] = struct{}{}
		case "saphana.disk.size.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The disk size.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("path")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("usage_type")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "used", attrVal.Str())
			validatedMetrics["saphana.disk.size.current"] = struct{}{}
		case "saphana.host.memory.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The amount of physical memory on the host.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "used", attrVal.Str())
			validatedMetrics["saphana.host.memory.current"] = struct{}{}
		case "saphana.host.swap.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The amount of swap space on the host.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "used", attrVal.Str())
			validatedMetrics["saphana.host.swap.current"] = struct{}{}
		case "saphana.instance.code_size":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The instance code size, including shared libraries of SAP HANA processes.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["saphana.instance.code_size"] = struct{}{}
		case "saphana.instance.memory.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The size of the memory pool for all SAP HANA processes.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "used", attrVal.Str())
			validatedMetrics["saphana.instance.memory.current"] = struct{}{}
		case "saphana.instance.memory.shared.allocated":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The shared memory size of SAP HANA processes.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["saphana.instance.memory.shared.allocated"] = struct{}{}
		case "saphana.instance.memory.used.peak":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The peak memory from the memory pool used by SAP HANA processes since the instance started (this is a sample-based value).", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["saphana.instance.memory.used.peak"] = struct{}{}
		case "saphana.license.expiration.time":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The amount of time remaining before license expiration.", ms.At(i).Description())
			assert.Equal(t, "s", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("system")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("product")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.license.expiration.time"] = struct{}{}
		case "saphana.license.limit":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The allowed product usage as specified by the license (for example, main memory).", ms.At(i).Description())
			assert.Equal(t, "{licenses}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("system")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("product")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.license.limit"] = struct{}{}
		case "saphana.license.peak":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The peak product usage value during last 13 months, measured periodically.", ms.At(i).Description())
			assert.Equal(t, "{licenses}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("system")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("product")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.license.peak"] = struct{}{}
		case "saphana.network.request.average_time":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The average response time calculated over recent requests", ms.At(i).Description())
			assert.Equal(t, "ms", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			validatedMetrics["saphana.network.request.average_time"] = struct{}{}
		case "saphana.network.request.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of active and pending service requests.", ms.At(i).Description())
			assert.Equal(t, "{requests}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "active", attrVal.Str())
			validatedMetrics["saphana.network.request.count"] = struct{}{}
		case "saphana.network.request.finished.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of service requests that have completed.", ms.At(i).Description())
			assert.Equal(t, "{requests}", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "internal", attrVal.Str())
			validatedMetrics["saphana.network.request.finished.count"] = struct{}{}
		case "saphana.replication.average_time":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The average amount of time consumed replicating a log.", ms.At(i).Description())
			assert.Equal(t, "us", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			attrVal, ok := dp.Attributes().Get("primary")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("secondary")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("port")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("mode")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.replication.average_time"] = struct{}{}
		case "saphana.replication.backlog.size":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The current replication backlog size.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("primary")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("secondary")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("port")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("mode")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.replication.backlog.size"] = struct{}{}
		case "saphana.replication.backlog.time":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The current replication backlog.", ms.At(i).Description())
			assert.Equal(t, "us", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("primary")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("secondary")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("port")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("mode")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.replication.backlog.time"] = struct{}{}
		case "saphana.row_store.memory.used":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The used memory for all row tables.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "fixed", attrVal.Str())
			validatedMetrics["saphana.row_store.memory.used"] = struct{}{}
		case "saphana.schema.memory.used.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The memory size for all tables in schema.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("schema")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "main", attrVal.Str())
			validatedMetrics["saphana.schema.memory.used.current"] = struct{}{}
		case "saphana.schema.memory.used.max":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The estimated maximum memory consumption for all fully loaded tables in schema (data for open transactions is not included).", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("schema")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.schema.memory.used.max"] = struct{}{}
		case "saphana.schema.operation.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of operations done on all tables in schema.", ms.At(i).Description())
			assert.Equal(t, "{operations}", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("schema")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "read", attrVal.Str())
			validatedMetrics["saphana.schema.operation.count"] = struct{}{}
		case "saphana.schema.record.compressed.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of entries in main during the last optimize compression run for all tables in schema.", ms.At(i).Description())
			assert.Equal(t, "{records}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("schema")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.schema.record.compressed.count"] = struct{}{}
		case "saphana.schema.record.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of records for all tables in schema.", ms.At(i).Description())
			assert.Equal(t, "{records}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("schema")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "main", attrVal.Str())
			validatedMetrics["saphana.schema.record.count"] = struct{}{}
		case "saphana.service.code_size":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The service code size, including shared libraries.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.service.code_size"] = struct{}{}
		case "saphana.service.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of services in a given status.", ms.At(i).Description())
			assert.Equal(t, "{services}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("status")
			assert.True(t, ok)
			assert.Equal(t, "active", attrVal.Str())
			validatedMetrics["saphana.service.count"] = struct{}{}
		case "saphana.service.memory.compactors.allocated":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The part of the memory pool that can potentially (if unpinned) be freed during a memory shortage.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.service.memory.compactors.allocated"] = struct{}{}
		case "saphana.service.memory.compactors.freeable":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The memory that can be freed during a memory shortage.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.service.memory.compactors.freeable"] = struct{}{}
		case "saphana.service.memory.effective_limit":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The effective maximum memory pool size, calculated considering the pool sizes of other processes.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.service.memory.effective_limit"] = struct{}{}
		case "saphana.service.memory.heap.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The size of the heap portion of the memory pool.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "used", attrVal.Str())
			validatedMetrics["saphana.service.memory.heap.current"] = struct{}{}
		case "saphana.service.memory.limit":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The configured maximum memory pool size.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.service.memory.limit"] = struct{}{}
		case "saphana.service.memory.shared.current":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The size of the shared portion of the memory pool.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "used", attrVal.Str())
			validatedMetrics["saphana.service.memory.shared.current"] = struct{}{}
		case "saphana.service.memory.used":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The used memory from the operating system perspective.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "logical", attrVal.Str())
			validatedMetrics["saphana.service.memory.used"] = struct{}{}
		case "saphana.service.stack_size":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The service stack size.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("service")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.service.stack_size"] = struct{}{}
		case "saphana.service.thread.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of service threads in a given status.", ms.At(i).Description())
			assert.Equal(t, "{threads}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("status")
			assert.True(t, ok)
			assert.Equal(t, "active", attrVal.Str())
			validatedMetrics["saphana.service.thread.count"] = struct{}{}
		case "saphana.transaction.blocked":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of transactions waiting for a lock.", ms.At(i).Description())
			assert.Equal(t, "{transactions}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["saphana.transaction.blocked"] = struct{}{}
		case "saphana.transaction.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of transactions.", ms.At(i).Description())
			assert.Equal(t, "{transactions}", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "update", attrVal.Str())
			validatedMetrics["saphana.transaction.count"] = struct{}{}
		case "saphana.uptime":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The uptime of the database.", ms.At(i).Description())
			assert.Equal(t, "s", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("system")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("database")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			validatedMetrics["saphana.uptime"] = struct{}{}
		case "saphana.volume.operation.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of operations executed.", ms.At(i).Description())
			assert.Equal(t, "{operations}", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("path")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("usage_type")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "read", attrVal.Str())
			validatedMetrics["saphana.volume.operation.count"] = struct{}{}
		case "saphana.volume.operation.size":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The size of operations executed.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("path")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("usage_type")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "read", attrVal.Str())
			validatedMetrics["saphana.volume.operation.size"] = struct{}{}
		case "saphana.volume.operation.time":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The time spent executing operations.", ms.At(i).Description())
			assert.Equal(t, "ms", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("path")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("usage_type")
			assert.True(t, ok)
			assert.EqualValues(t, "attr-val", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("type")
			assert.True(t, ok)
			assert.Equal(t, "read", attrVal.Str())
			validatedMetrics["saphana.volume.operation.time"] = struct{}{}
		}
	}
	assert.Equal(t, allMetricsCount, len(validatedMetrics))
}

func TestNoMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	metricsSettings := MetricsSettings{
		SaphanaAlertCount:                       MetricSettings{Enabled: false},
		SaphanaBackupLatest:                     MetricSettings{Enabled: false},
		SaphanaColumnMemoryUsed:                 MetricSettings{Enabled: false},
		SaphanaComponentMemoryUsed:              MetricSettings{Enabled: false},
		SaphanaConnectionCount:                  MetricSettings{Enabled: false},
		SaphanaCPUUsed:                          MetricSettings{Enabled: false},
		SaphanaDiskSizeCurrent:                  MetricSettings{Enabled: false},
		SaphanaHostMemoryCurrent:                MetricSettings{Enabled: false},
		SaphanaHostSwapCurrent:                  MetricSettings{Enabled: false},
		SaphanaInstanceCodeSize:                 MetricSettings{Enabled: false},
		SaphanaInstanceMemoryCurrent:            MetricSettings{Enabled: false},
		SaphanaInstanceMemorySharedAllocated:    MetricSettings{Enabled: false},
		SaphanaInstanceMemoryUsedPeak:           MetricSettings{Enabled: false},
		SaphanaLicenseExpirationTime:            MetricSettings{Enabled: false},
		SaphanaLicenseLimit:                     MetricSettings{Enabled: false},
		SaphanaLicensePeak:                      MetricSettings{Enabled: false},
		SaphanaNetworkRequestAverageTime:        MetricSettings{Enabled: false},
		SaphanaNetworkRequestCount:              MetricSettings{Enabled: false},
		SaphanaNetworkRequestFinishedCount:      MetricSettings{Enabled: false},
		SaphanaReplicationAverageTime:           MetricSettings{Enabled: false},
		SaphanaReplicationBacklogSize:           MetricSettings{Enabled: false},
		SaphanaReplicationBacklogTime:           MetricSettings{Enabled: false},
		SaphanaRowStoreMemoryUsed:               MetricSettings{Enabled: false},
		SaphanaSchemaMemoryUsedCurrent:          MetricSettings{Enabled: false},
		SaphanaSchemaMemoryUsedMax:              MetricSettings{Enabled: false},
		SaphanaSchemaOperationCount:             MetricSettings{Enabled: false},
		SaphanaSchemaRecordCompressedCount:      MetricSettings{Enabled: false},
		SaphanaSchemaRecordCount:                MetricSettings{Enabled: false},
		SaphanaServiceCodeSize:                  MetricSettings{Enabled: false},
		SaphanaServiceCount:                     MetricSettings{Enabled: false},
		SaphanaServiceMemoryCompactorsAllocated: MetricSettings{Enabled: false},
		SaphanaServiceMemoryCompactorsFreeable:  MetricSettings{Enabled: false},
		SaphanaServiceMemoryEffectiveLimit:      MetricSettings{Enabled: false},
		SaphanaServiceMemoryHeapCurrent:         MetricSettings{Enabled: false},
		SaphanaServiceMemoryLimit:               MetricSettings{Enabled: false},
		SaphanaServiceMemorySharedCurrent:       MetricSettings{Enabled: false},
		SaphanaServiceMemoryUsed:                MetricSettings{Enabled: false},
		SaphanaServiceStackSize:                 MetricSettings{Enabled: false},
		SaphanaServiceThreadCount:               MetricSettings{Enabled: false},
		SaphanaTransactionBlocked:               MetricSettings{Enabled: false},
		SaphanaTransactionCount:                 MetricSettings{Enabled: false},
		SaphanaUptime:                           MetricSettings{Enabled: false},
		SaphanaVolumeOperationCount:             MetricSettings{Enabled: false},
		SaphanaVolumeOperationSize:              MetricSettings{Enabled: false},
		SaphanaVolumeOperationTime:              MetricSettings{Enabled: false},
	}
	observedZapCore, observedLogs := observer.New(zap.WarnLevel)
	settings := receivertest.NewNopCreateSettings()
	settings.Logger = zap.New(observedZapCore)
	mb := NewMetricsBuilder(metricsSettings, settings, WithStartTime(start))

	assert.Equal(t, 0, observedLogs.Len())
	mb.RecordSaphanaAlertCountDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaBackupLatestDataPoint(ts, "1")
	mb.RecordSaphanaColumnMemoryUsedDataPoint(ts, "1", AttributeColumnMemoryType(1), AttributeColumnMemorySubtype(1))
	mb.RecordSaphanaComponentMemoryUsedDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaConnectionCountDataPoint(ts, "1", AttributeConnectionStatus(1))
	mb.RecordSaphanaCPUUsedDataPoint(ts, "1", AttributeCPUType(1))
	mb.RecordSaphanaDiskSizeCurrentDataPoint(ts, "1", "attr-val", "attr-val", AttributeDiskStateUsedFree(1))
	mb.RecordSaphanaHostMemoryCurrentDataPoint(ts, "1", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaHostSwapCurrentDataPoint(ts, "1", AttributeHostSwapState(1))
	mb.RecordSaphanaInstanceCodeSizeDataPoint(ts, "1")
	mb.RecordSaphanaInstanceMemoryCurrentDataPoint(ts, "1", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaInstanceMemorySharedAllocatedDataPoint(ts, "1")
	mb.RecordSaphanaInstanceMemoryUsedPeakDataPoint(ts, "1")
	mb.RecordSaphanaLicenseExpirationTimeDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaLicenseLimitDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaLicensePeakDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaNetworkRequestAverageTimeDataPoint(ts, "1")
	mb.RecordSaphanaNetworkRequestCountDataPoint(ts, "1", AttributeActivePendingRequestState(1))
	mb.RecordSaphanaNetworkRequestFinishedCountDataPoint(ts, "1", AttributeInternalExternalRequestType(1))
	mb.RecordSaphanaReplicationAverageTimeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")
	mb.RecordSaphanaReplicationBacklogSizeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")
	mb.RecordSaphanaReplicationBacklogTimeDataPoint(ts, "1", "attr-val", "attr-val", "attr-val", "attr-val")
	mb.RecordSaphanaRowStoreMemoryUsedDataPoint(ts, "1", AttributeRowMemoryType(1))
	mb.RecordSaphanaSchemaMemoryUsedCurrentDataPoint(ts, "1", "attr-val", AttributeSchemaMemoryType(1))
	mb.RecordSaphanaSchemaMemoryUsedMaxDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaSchemaOperationCountDataPoint(ts, "1", "attr-val", AttributeSchemaOperationType(1))
	mb.RecordSaphanaSchemaRecordCompressedCountDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaSchemaRecordCountDataPoint(ts, "1", "attr-val", AttributeSchemaRecordType(1))
	mb.RecordSaphanaServiceCodeSizeDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceCountDataPoint(ts, "1", AttributeServiceStatus(1))
	mb.RecordSaphanaServiceMemoryCompactorsAllocatedDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemoryCompactorsFreeableDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemoryEffectiveLimitDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemoryHeapCurrentDataPoint(ts, "1", "attr-val", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaServiceMemoryLimitDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceMemorySharedCurrentDataPoint(ts, "1", "attr-val", AttributeMemoryStateUsedFree(1))
	mb.RecordSaphanaServiceMemoryUsedDataPoint(ts, "1", "attr-val", AttributeServiceMemoryUsedType(1))
	mb.RecordSaphanaServiceStackSizeDataPoint(ts, "1", "attr-val")
	mb.RecordSaphanaServiceThreadCountDataPoint(ts, "1", AttributeThreadStatus(1))
	mb.RecordSaphanaTransactionBlockedDataPoint(ts, "1")
	mb.RecordSaphanaTransactionCountDataPoint(ts, "1", AttributeTransactionType(1))
	mb.RecordSaphanaUptimeDataPoint(ts, "1", "attr-val", "attr-val")
	mb.RecordSaphanaVolumeOperationCountDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))
	mb.RecordSaphanaVolumeOperationSizeDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))
	mb.RecordSaphanaVolumeOperationTimeDataPoint(ts, "1", "attr-val", "attr-val", AttributeVolumeOperationType(1))

	metrics := mb.Emit()

	assert.Equal(t, 0, metrics.ResourceMetrics().Len())
}
