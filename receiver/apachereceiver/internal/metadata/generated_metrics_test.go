// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

func TestDefaultMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	mb := NewMetricsBuilder(DefaultMetricsSettings(), receivertest.NewNopCreateSettings(), WithStartTime(start))
	enabledMetrics := make(map[string]bool)

	enabledMetrics["apache.cpu.load"] = true
	mb.RecordApacheCPULoadDataPoint(ts, "1")

	enabledMetrics["apache.cpu.time"] = true
	mb.RecordApacheCPUTimeDataPoint(ts, "1", AttributeCPULevel(1), AttributeCPUMode(1))

	enabledMetrics["apache.current_connections"] = true
	mb.RecordApacheCurrentConnectionsDataPoint(ts, "1")

	enabledMetrics["apache.load.1"] = true
	mb.RecordApacheLoad1DataPoint(ts, "1")

	enabledMetrics["apache.load.15"] = true
	mb.RecordApacheLoad15DataPoint(ts, "1")

	enabledMetrics["apache.load.5"] = true
	mb.RecordApacheLoad5DataPoint(ts, "1")

	enabledMetrics["apache.request.time"] = true
	mb.RecordApacheRequestTimeDataPoint(ts, "1")

	enabledMetrics["apache.requests"] = true
	mb.RecordApacheRequestsDataPoint(ts, "1")

	enabledMetrics["apache.scoreboard"] = true
	mb.RecordApacheScoreboardDataPoint(ts, 1, AttributeScoreboardState(1))

	enabledMetrics["apache.traffic"] = true
	mb.RecordApacheTrafficDataPoint(ts, 1)

	enabledMetrics["apache.uptime"] = true
	mb.RecordApacheUptimeDataPoint(ts, "1")

	enabledMetrics["apache.workers"] = true
	mb.RecordApacheWorkersDataPoint(ts, "1", AttributeWorkersState(1))

	metrics := mb.Emit()

	assert.Equal(t, 1, metrics.ResourceMetrics().Len())
	sm := metrics.ResourceMetrics().At(0).ScopeMetrics()
	assert.Equal(t, 1, sm.Len())
	ms := sm.At(0).Metrics()
	assert.Equal(t, len(enabledMetrics), ms.Len())
	seenMetrics := make(map[string]bool)
	for i := 0; i < ms.Len(); i++ {
		assert.True(t, enabledMetrics[ms.At(i).Name()])
		seenMetrics[ms.At(i).Name()] = true
	}
	assert.Equal(t, len(enabledMetrics), len(seenMetrics))
}

func TestAllMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	metricsSettings := MetricsSettings{
		ApacheCPULoad:            MetricSettings{Enabled: true},
		ApacheCPUTime:            MetricSettings{Enabled: true},
		ApacheCurrentConnections: MetricSettings{Enabled: true},
		ApacheLoad1:              MetricSettings{Enabled: true},
		ApacheLoad15:             MetricSettings{Enabled: true},
		ApacheLoad5:              MetricSettings{Enabled: true},
		ApacheRequestTime:        MetricSettings{Enabled: true},
		ApacheRequests:           MetricSettings{Enabled: true},
		ApacheScoreboard:         MetricSettings{Enabled: true},
		ApacheTraffic:            MetricSettings{Enabled: true},
		ApacheUptime:             MetricSettings{Enabled: true},
		ApacheWorkers:            MetricSettings{Enabled: true},
	}
	observedZapCore, observedLogs := observer.New(zap.WarnLevel)
	settings := receivertest.NewNopCreateSettings()
	settings.Logger = zap.New(observedZapCore)
	mb := NewMetricsBuilder(metricsSettings, settings, WithStartTime(start))

	assert.Equal(t, 0, observedLogs.Len())

	mb.RecordApacheCPULoadDataPoint(ts, "1")
	mb.RecordApacheCPUTimeDataPoint(ts, "1", AttributeCPULevel(1), AttributeCPUMode(1))
	mb.RecordApacheCurrentConnectionsDataPoint(ts, "1")
	mb.RecordApacheLoad1DataPoint(ts, "1")
	mb.RecordApacheLoad15DataPoint(ts, "1")
	mb.RecordApacheLoad5DataPoint(ts, "1")
	mb.RecordApacheRequestTimeDataPoint(ts, "1")
	mb.RecordApacheRequestsDataPoint(ts, "1")
	mb.RecordApacheScoreboardDataPoint(ts, 1, AttributeScoreboardState(1))
	mb.RecordApacheTrafficDataPoint(ts, 1)
	mb.RecordApacheUptimeDataPoint(ts, "1")
	mb.RecordApacheWorkersDataPoint(ts, "1", AttributeWorkersState(1))

	metrics := mb.Emit(WithApacheServerName("attr-val"), WithApacheServerPort("attr-val"))

	assert.Equal(t, 1, metrics.ResourceMetrics().Len())
	rm := metrics.ResourceMetrics().At(0)
	attrCount := 0
	attrCount++
	attrVal, ok := rm.Resource().Attributes().Get("apache.server.name")
	assert.True(t, ok)
	assert.EqualValues(t, "attr-val", attrVal.Str())
	attrCount++
	attrVal, ok = rm.Resource().Attributes().Get("apache.server.port")
	assert.True(t, ok)
	assert.EqualValues(t, "attr-val", attrVal.Str())
	assert.Equal(t, attrCount, rm.Resource().Attributes().Len())

	assert.Equal(t, 1, rm.ScopeMetrics().Len())
	ms := rm.ScopeMetrics().At(0).Metrics()
	allMetricsCount := reflect.TypeOf(MetricsSettings{}).NumField()
	assert.Equal(t, allMetricsCount, ms.Len())
	validatedMetrics := make(map[string]struct{})
	for i := 0; i < ms.Len(); i++ {
		switch ms.At(i).Name() {
		case "apache.cpu.load":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "Current load of the CPU.", ms.At(i).Description())
			assert.Equal(t, "%", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			validatedMetrics["apache.cpu.load"] = struct{}{}
		case "apache.cpu.time":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Jiffs used by processes of given category.", ms.At(i).Description())
			assert.Equal(t, "{jiff}", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			attrVal, ok := dp.Attributes().Get("level")
			assert.True(t, ok)
			assert.Equal(t, "self", attrVal.Str())
			attrVal, ok = dp.Attributes().Get("mode")
			assert.True(t, ok)
			assert.Equal(t, "system", attrVal.Str())
			validatedMetrics["apache.cpu.time"] = struct{}{}
		case "apache.current_connections":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of active connections currently attached to the HTTP server.", ms.At(i).Description())
			assert.Equal(t, "{connections}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["apache.current_connections"] = struct{}{}
		case "apache.load.1":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The average server load during the last minute.", ms.At(i).Description())
			assert.Equal(t, "%", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			validatedMetrics["apache.load.1"] = struct{}{}
		case "apache.load.15":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The average server load during the last 15 minutes.", ms.At(i).Description())
			assert.Equal(t, "%", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			validatedMetrics["apache.load.15"] = struct{}{}
		case "apache.load.5":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "The average server load during the last 5 minutes.", ms.At(i).Description())
			assert.Equal(t, "%", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
			assert.Equal(t, float64(1), dp.DoubleValue())
			validatedMetrics["apache.load.5"] = struct{}{}
		case "apache.request.time":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Total time spent on handling requests.", ms.At(i).Description())
			assert.Equal(t, "ms", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["apache.request.time"] = struct{}{}
		case "apache.requests":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of requests serviced by the HTTP server per second.", ms.At(i).Description())
			assert.Equal(t, "{requests}", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["apache.requests"] = struct{}{}
		case "apache.scoreboard":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of workers in each state.", ms.At(i).Description())
			assert.Equal(t, "{workers}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "open", attrVal.Str())
			validatedMetrics["apache.scoreboard"] = struct{}{}
		case "apache.traffic":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Total HTTP server traffic.", ms.At(i).Description())
			assert.Equal(t, "By", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["apache.traffic"] = struct{}{}
		case "apache.uptime":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The amount of time that the server has been running in seconds.", ms.At(i).Description())
			assert.Equal(t, "s", ms.At(i).Unit())
			assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["apache.uptime"] = struct{}{}
		case "apache.workers":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of workers currently attached to the HTTP server.", ms.At(i).Description())
			assert.Equal(t, "{workers}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, "busy", attrVal.Str())
			validatedMetrics["apache.workers"] = struct{}{}
		}
	}
	assert.Equal(t, allMetricsCount, len(validatedMetrics))
}

func TestNoMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	metricsSettings := MetricsSettings{
		ApacheCPULoad:            MetricSettings{Enabled: false},
		ApacheCPUTime:            MetricSettings{Enabled: false},
		ApacheCurrentConnections: MetricSettings{Enabled: false},
		ApacheLoad1:              MetricSettings{Enabled: false},
		ApacheLoad15:             MetricSettings{Enabled: false},
		ApacheLoad5:              MetricSettings{Enabled: false},
		ApacheRequestTime:        MetricSettings{Enabled: false},
		ApacheRequests:           MetricSettings{Enabled: false},
		ApacheScoreboard:         MetricSettings{Enabled: false},
		ApacheTraffic:            MetricSettings{Enabled: false},
		ApacheUptime:             MetricSettings{Enabled: false},
		ApacheWorkers:            MetricSettings{Enabled: false},
	}
	observedZapCore, observedLogs := observer.New(zap.WarnLevel)
	settings := receivertest.NewNopCreateSettings()
	settings.Logger = zap.New(observedZapCore)
	mb := NewMetricsBuilder(metricsSettings, settings, WithStartTime(start))

	assert.Equal(t, 0, observedLogs.Len())
	mb.RecordApacheCPULoadDataPoint(ts, "1")
	mb.RecordApacheCPUTimeDataPoint(ts, "1", AttributeCPULevel(1), AttributeCPUMode(1))
	mb.RecordApacheCurrentConnectionsDataPoint(ts, "1")
	mb.RecordApacheLoad1DataPoint(ts, "1")
	mb.RecordApacheLoad15DataPoint(ts, "1")
	mb.RecordApacheLoad5DataPoint(ts, "1")
	mb.RecordApacheRequestTimeDataPoint(ts, "1")
	mb.RecordApacheRequestsDataPoint(ts, "1")
	mb.RecordApacheScoreboardDataPoint(ts, 1, AttributeScoreboardState(1))
	mb.RecordApacheTrafficDataPoint(ts, 1)
	mb.RecordApacheUptimeDataPoint(ts, "1")
	mb.RecordApacheWorkersDataPoint(ts, "1", AttributeWorkersState(1))

	metrics := mb.Emit()

	assert.Equal(t, 0, metrics.ResourceMetrics().Len())
}
