// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"fmt"
	"strconv"
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledProvidedByUser bool
}

// IsEnabledProvidedByUser returns true if `enabled` option is explicitly set in user settings to any value.
func (ms *MetricSettings) IsEnabledProvidedByUser() bool {
	return ms.enabledProvidedByUser
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledProvidedByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for haproxyreceiver metrics.
type MetricsSettings struct {
	HaproxyConnectionRate MetricSettings `mapstructure:"haproxy.connection_rate"`
	HaproxyIdlePercent    MetricSettings `mapstructure:"haproxy.idle_percent"`
	HaproxyRequests       MetricSettings `mapstructure:"haproxy.requests"`
	HaproxySessionsCount  MetricSettings `mapstructure:"haproxy.sessions.count"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		HaproxyConnectionRate: MetricSettings{
			Enabled: true,
		},
		HaproxyIdlePercent: MetricSettings{
			Enabled: true,
		},
		HaproxyRequests: MetricSettings{
			Enabled: true,
		},
		HaproxySessionsCount: MetricSettings{
			Enabled: true,
		},
	}
}

type metricHaproxyConnectionRate struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills haproxy.connection_rate metric with initial data.
func (m *metricHaproxyConnectionRate) init() {
	m.data.SetName("haproxy.connection_rate")
	m.data.SetDescription("Number of connections over the last elapsed second (frontend). Corresponds to HAProxy's `conn_rate` metric.")
	m.data.SetUnit("{connections}")
	m.data.SetEmptyGauge()
}

func (m *metricHaproxyConnectionRate) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHaproxyConnectionRate) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHaproxyConnectionRate) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHaproxyConnectionRate(settings MetricSettings) metricHaproxyConnectionRate {
	m := metricHaproxyConnectionRate{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricHaproxyIdlePercent struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills haproxy.idle_percent metric with initial data.
func (m *metricHaproxyIdlePercent) init() {
	m.data.SetName("haproxy.idle_percent")
	m.data.SetDescription("Ratio of system polling time versus total time. Corresponds to HAProxy's `I`dle_pct` metric.")
	m.data.SetUnit("{percent}")
	m.data.SetEmptyGauge()
}

func (m *metricHaproxyIdlePercent) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHaproxyIdlePercent) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHaproxyIdlePercent) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHaproxyIdlePercent(settings MetricSettings) metricHaproxyIdlePercent {
	m := metricHaproxyIdlePercent{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricHaproxyRequests struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills haproxy.requests metric with initial data.
func (m *metricHaproxyRequests) init() {
	m.data.SetName("haproxy.requests")
	m.data.SetDescription("Total number of requests on this worker process since started. Corresponds to HAProxy's `CumReq` metric.")
	m.data.SetUnit("{requests}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricHaproxyRequests) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHaproxyRequests) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHaproxyRequests) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHaproxyRequests(settings MetricSettings) metricHaproxyRequests {
	m := metricHaproxyRequests{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricHaproxySessionsCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills haproxy.sessions.count metric with initial data.
func (m *metricHaproxySessionsCount) init() {
	m.data.SetName("haproxy.sessions.count")
	m.data.SetDescription("Current sessions. Corresponds to HAProxy's `scur` metric.")
	m.data.SetUnit("{sessions}")
	m.data.SetEmptyGauge()
}

func (m *metricHaproxySessionsCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHaproxySessionsCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHaproxySessionsCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHaproxySessionsCount(settings MetricSettings) metricHaproxySessionsCount {
	m := metricHaproxySessionsCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                   pcommon.Timestamp   // start time that will be applied to all recorded data points.
	metricsCapacity             int                 // maximum observed number of metrics per resource.
	resourceCapacity            int                 // maximum observed number of resource attributes.
	metricsBuffer               pmetric.Metrics     // accumulates metrics data before emitting.
	buildInfo                   component.BuildInfo // contains version information
	metricHaproxyConnectionRate metricHaproxyConnectionRate
	metricHaproxyIdlePercent    metricHaproxyIdlePercent
	metricHaproxyRequests       metricHaproxyRequests
	metricHaproxySessionsCount  metricHaproxySessionsCount
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(ms MetricsSettings, settings receiver.CreateSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                   pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:               pmetric.NewMetrics(),
		buildInfo:                   settings.BuildInfo,
		metricHaproxyConnectionRate: newMetricHaproxyConnectionRate(ms.HaproxyConnectionRate),
		metricHaproxyIdlePercent:    newMetricHaproxyIdlePercent(ms.HaproxyIdlePercent),
		metricHaproxyRequests:       newMetricHaproxyRequests(ms.HaproxyRequests),
		metricHaproxySessionsCount:  newMetricHaproxySessionsCount(ms.HaproxySessionsCount),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithHaproxyAddr sets provided value as "haproxy.addr" attribute for current resource.
func WithHaproxyAddr(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.addr", val)
	}
}

// WithHaproxyAlgo sets provided value as "haproxy.algo" attribute for current resource.
func WithHaproxyAlgo(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.algo", val)
	}
}

// WithHaproxyIid sets provided value as "haproxy.iid" attribute for current resource.
func WithHaproxyIid(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.iid", val)
	}
}

// WithHaproxyPid sets provided value as "haproxy.pid" attribute for current resource.
func WithHaproxyPid(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.pid", val)
	}
}

// WithHaproxyProxyName sets provided value as "haproxy.proxy_name" attribute for current resource.
func WithHaproxyProxyName(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.proxy_name", val)
	}
}

// WithHaproxyServiceName sets provided value as "haproxy.service_name" attribute for current resource.
func WithHaproxyServiceName(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.service_name", val)
	}
}

// WithHaproxySid sets provided value as "haproxy.sid" attribute for current resource.
func WithHaproxySid(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.sid", val)
	}
}

// WithHaproxyType sets provided value as "haproxy.type" attribute for current resource.
func WithHaproxyType(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.type", val)
	}
}

// WithHaproxyURL sets provided value as "haproxy.url" attribute for current resource.
func WithHaproxyURL(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().PutStr("haproxy.url", val)
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/haproxyreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricHaproxyConnectionRate.emit(ils.Metrics())
	mb.metricHaproxyIdlePercent.emit(ils.Metrics())
	mb.metricHaproxyRequests.emit(ils.Metrics())
	mb.metricHaproxySessionsCount.emit(ils.Metrics())
	for _, op := range rmo {
		op(rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := pmetric.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordHaproxyConnectionRateDataPoint adds a data point to haproxy.connection_rate metric.
func (mb *MetricsBuilder) RecordHaproxyConnectionRateDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for HaproxyConnectionRate, value was %s: %w", inputVal, err)
	}
	mb.metricHaproxyConnectionRate.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordHaproxyIdlePercentDataPoint adds a data point to haproxy.idle_percent metric.
func (mb *MetricsBuilder) RecordHaproxyIdlePercentDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseFloat(inputVal, 64)
	if err != nil {
		return fmt.Errorf("failed to parse float64 for HaproxyIdlePercent, value was %s: %w", inputVal, err)
	}
	mb.metricHaproxyIdlePercent.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordHaproxyRequestsDataPoint adds a data point to haproxy.requests metric.
func (mb *MetricsBuilder) RecordHaproxyRequestsDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for HaproxyRequests, value was %s: %w", inputVal, err)
	}
	mb.metricHaproxyRequests.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordHaproxySessionsCountDataPoint adds a data point to haproxy.sessions.count metric.
func (mb *MetricsBuilder) RecordHaproxySessionsCountDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for HaproxySessionsCount, value was %s: %w", inputVal, err)
	}
	mb.metricHaproxySessionsCount.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
